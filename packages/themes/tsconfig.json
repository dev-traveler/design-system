{
  "compilerOptions": {
    "outDir": "./dist",
    "target": "ESNext",
    "module": "ESNext",
    "lib": ["ESNext", "DOM"],
    "declaration": true,
    "strict": true,
    "moduleResolution": "node",
    "jsx": "react-jsx"
  }
}

// "outDir": "./dist"
// 이 설정은 TypeScript 컴파일러가 JavaScript 파일을 출력할 디렉토리를 지정합니다.
// 이 경우, 컴파일러는 프로젝트의 루트 디렉토리에 있는 dist 디렉토리에 출력 파일을 생성합니다.

// "target": "ESNext"
// 이 설정은 컴파일러가 어떤 ECMAScript 버전을 대상으로 할지를 지정합니다. ESNext는 가장 최신의 드래프트 버전을 의미합니다.

// "module": "ESNext"
// 이 설정은 컴파일러가 생성할 모듈 코드의 종류를 지정합니다. ESNext는 가장 최신의 모듈 시스템 (예: ES6 모듈)을 사용하도록 지시합니다.

// "lib": ["ESNext", "DOM"]
// 이 설정은 컴파일러가 기본적으로 포함할 라이브러리 파일을 지정합니다. ESNext는 최신 ECMAScript 기능을, DOM은 웹 브라우저 환경을 의미합니다.

// "declaration": true
// 이 설정은 컴파일러가 .d.ts 선언 파일을 생성할지 여부를 지정합니다.
// 선언 파일은 TypeScript 타입 정보를 담고 있습니다.
// 이는 주로 라이브러리를 개발할 때 유용합니다.

// "strict": true
//  이 설정은 모든 엄격한 타입-체킹 옵션을 활성화합니다. 이는 코드의 타입 안정성을 높이는 데 도움이 됩니다.
// strict 모드에서는, 예를 들어, 모든 변수가 초기화되어야 하며, null과 undefined는 다른 타입에 할당할 수 없습니다.

// "moduleResolution": "node"
// 이 설정은 모듈 해석 알고리즘을 지정합니다. node는 Node.js 스타일의 모듈 해석을 사용하겠다는 것을 의미합니다.
// 이는 node_modules 폴더와 package.json 파일을 사용하여 모듈을 찾는 방식을 의미합니다.

// "jsx": "react-jsx"
// 이 설정은 JSX 구문을 어떻게 처리할지를 지정합니다.
// react-jsx는 React 17 이상에서 사용하는 새로운 JSX 변환 방식을 사용하겠다는 것을 의미합니다.
// 이전 버전의 React에서는 "react"를 사용했습니다. 이 새로운 JSX 변환 방식은 React의 런타임을 필요로 하지 않아, 번들 크기를 줄이고 성능을 향상시킬 수 있습니다.
//
// React 17 이상에서는 새로운 JSX Transform이 도입되어, JSX를 JavaScript로 변환하는 방식이 변경되었습니다.
//
// "jsx": "react" 설정을 사용할 때, JSX 코드는 `React.createElement` 함수 호출로 변환됩니다. 예를 들어, 다음과 같은 JSX 코드가 있을 때:
//
// const element = <h1>Hello, world!</h1>;
//
// 이는 다음과 같이 변환됩니다:
//
// const element = React.createElement('h1', null, 'Hello, world!');
//
// 이 방식은 React 라이브러리의 `React` 객체를 항상 스코프에 가져와야 하므로, 모든 파일의 상단에 `import React from 'react';`를 추가해야 합니다.
//
// 반면에 "jsx": "react-jsx" 설정을 사용할 때, JSX 코드는 `jsx`와 `jsxs` 함수 호출로 변환됩니다. 이 함수들은 자동으로 import되므로, `import React from 'react';`를 추가할 필요가 없습니다. 동일한 JSX 코드는 다음과 같이 변환됩니다:
//
// import { jsx as _jsx } from 'react/jsx-runtime';
// const element = _jsx('h1', { children: 'Hello, world!' });
//
// 이 새로운 변환 방식은 코드를 더 간결하게 만들고, 빌드 후의 파일 크기를 줄이며, 런타임 성능을 약간 향상시킵니다.
